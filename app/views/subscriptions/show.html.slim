ruby:
  image_names = [
    'Airplane', 'Ambulance', 'Auto rickshaw', 'Automobile', 'Bicycle', 'Bus', 'Canoe', 'Delivery-truck',
    'Fire-engine', 'Flying-saucer', 'Helicopter', 'High-speed train', 'Horse-racing', 'Kick scooter',
    'Man-biking', 'Man-rowing-boat', 'Minibus', 'Monorail', 'Motor-scooter', 'Passenger-ship', 'Person-surfing',
    'Pickup-truck', 'Police-car', 'Racing-car', 'Racing-motorcycle', 'Recreational-vehicle', 'Rocket', 'Sailboat',
    'Skier', 'Small-airplane', 'Snowboarder', 'Speedboat', 'Steam-locomotive', 'Suspension-railway', 'Taxi',
    'Tractor', 'Tram-car', 'Trolleybus', 'Woman-biking', 'Woman-rowing-boat', 'Woman-surfing'
  ]

  travel_image_name = image_names[rand(image_names.count)]

.flex.justify-center
  .w-full.lg:w-7/12.px-4.lg:px-0
    = render 'top_nav'
    .text-2xl.font-semibold.pb-4
      'My Progress

    ruby:
      # for day 1 start to the very left. that means day 2 will appear to jump double the distance which is actually good
      left_pct =  @subscription.plan_jobs.count == 1 ? 0 : ((@subscription.plan_jobs.count / @subscription.reading_plan.days.to_f) * 100)
      right_pct = 100 - left_pct
    .flex.justify-center.w-full.bg-white.items-center.pb-4
      = image_tag("transport/#{travel_image_name}.svg", class: 'pr-2')
      div(style="width: #{left_pct}%")
        hr
      .whitespace-nowrap.px-4.py-1.font-semibold.text-md.rounded-md.bg-primary-light
        '#{@subscription.plan_jobs.count} of #{@subscription.reading_plan.days}
      div(style="width: #{right_pct}%")
        hr
      = image_tag('Chequered-flag.svg', class: 'pl-2')

    .text-xl
      = "Plan: #{@subscription.reading_plan.plan_name}"
    .pb-8.text-gray-400.text-sm
      'It has been
      - started_days_ago = (Date.today - @subscription.created_at.to_date).to_i
      - started_days_ago = 0 if started_days_ago < 0
      span.font-bold= pluralize(started_days_ago, 'day')
      '&nbsp;since you began

    table.w-full.pb-8(style="border-collapse: separate; border-spacing: 0;")
      tr.text-sm.bg-primary-light
        th.font-thin.text-xs.py-1.px-4.rounded-l
          'Day
        th.font-thin.text-xs.py-1.px-2.w-full
          'Verses
        th.font-thin.text-xs.py-1.px-4.rounded-r
          'Complete

      /- PlanJob.where(subscription_id: params[:id]).order('plan_day').each do |pj|
      - @progress.each do |pj|
        tr.h-2
          td
          td
          td
        - case pj[2]
        - when true
          / already read
          tr.bg-gray-50
            td.py-3.text-gray-400.text-center.rounded-l-md.border-r.border-gray-200= pj[0]
            td.py-3.text-gray-400.px-4= pj[1]
            td.py-3.text-gray-400.rounded-r-md.text-center
              <svg class="inline-flex justify-center h-5 w-5 text-primary" xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd" />
              </svg>
        - when false
          / current day
          tr
            td.py-3.text-center.rounded-l-md.bg-primary.text-white.font-semibold= pj[0]
            td.py-3.border-t.border-b.border-l.border-primary.px-4.font-bold
              a.text-primary(href=plan_job_path(pj[3]))= pj[1]
            td.py-3.rounded-r-md.border-primary.border-t.border-r.border-b
        - when nil
          / not read yet
          tr
            td.py-3.text-center.border-l.rounded-l-md.border-gray-300.border-t.border-b= pj[0]
            td.py-3.border-t.border-b.border-gray-300.border-l.px-4= pj[1]
            td.py-3.rounded-r-md.border-gray-300.border-t.border-r.border-b.text-center
